plot(layerStacked[[5]])
#plot a single band
plot(layerStacked[[5]], main = "NIR Band")
# Subset Starts Here
# 1. By custom extent
rectExtnt = extent(17488, 40261, -27631, -4408)  #(xmin, xmax, ymin, ymax)
rectExtnt
plot(rectExtnt)
plot(rectExtnt, add = T)
plot(rectExtnt, add = TRUE)
# Subset Starts Here
# 1. By custom extent
rectExtnt = extent(17488, 40261, -27631, -4408)  #(xmin, xmax, ymin, ymax)
rectExtnt
# plot a single band
plot(layerStacked[[5]], main = "NIR Band")
# Subset Starts Here
# 1. By custom extent
rectExtnt = extent(17488, 40261, -27631, -4408)  #(xmin, xmax, ymin, ymax)
rectExtnt
plot(rectExtnt, add = TRUE)
# Subset Starts Here
# 1. By custom extent
rectExtnt = extent(1748, 4021, -27631, -4408)  #(xmin, xmax, ymin, ymax)
rectExtnt
plot(rectExtnt, add = TRUE)
# Subset Starts Here
# 1. By custom extent
rectExtnt = extent(214885, 352615, -206315, -30085)  #(xmin, xmax, ymin, ymax)
rectExtnt
plot(rectExtnt, add = TRUE)
# Subset Starts Here
# 1. By custom extent
rectExtnt = extent(214885, 352615, -206315, -20085)  #(xmin, xmax, ymin, ymax)
rectExtnt
plot(rectExtnt, add = TRUE)
# Subset Starts Here
# 1. By custom extent
rectExtnt = extent(214885, 352615, -206315, -120085)  #(xmin, xmax, ymin, ymax)
rectExtnt
plot(rectExtnt, add = TRUE)
plot(rectExtnt, add = TRUE)
# Install the required packages
# Landsat| Subset| Crop| Musk| Mosaic| DN value| Pixel Value| Multispectral| for loop| R
rm(list = ls(all=TRUE)) #clear memory
install.packages(c("raster", "rgdal"))
# Import the packages for raster img analysis
library(raster)     #raster
library(rgdal)      #vector
setwd("D:/STUDY/4.GIS/G I S 4.1/2.Geostats/0x520x/OUTPUT")
install.packages(c("raster", "rgdal"))
setwd("D:/STUDY/4.GIS/G I S 4.1/2.Geostats/0x520x/OUTPUT")
getwd()
layerStacked <- stack("L8LayerStack.tif")
layerStacked
# plot a single band
plot(layerStacked[[5]], main = "NIR Band")
# Subset Starts Here
# 1. By custom extent
rectExtnt = extent(214885, 352615, -206315, -120085)  #(xmin, xmax, ymin, ymax)
rectExtnt
plot(rectExtnt, add = TRUE)
plotRGB(layerStacked, 4,3,2 scale=65535, stretch = 'lin')
plotRGB(layerStacked, 4,3,2, scale=65535, stretch = 'lin')
# Crop
layerStacked <-crop(layerStacked, rectExtnt)
# Crop
layerStacked <-crop(layerStacked, rectExtnt)
plotRGB(layerStacked, 4,3,2, scale=65535, stretch = 'lin')
plotRGB(layerStacked, 4,3,2, scale=65535, stretch = 'lin', main = "RGB Croped")
# 2. By shapefile
list.files()
# load shp
shp <- readOGR("/shapefiles/Ngara")
# load shp
shp <- readOGR("/shapefiles/Ngara.shp")
# load shp
shp <- readOGR("shapefiles/Ngara.shp")
shp
setwd("D:/STUDY/4.GIS/G I S 4.1/2.Geostats/0x520x")
getwd()
layerStacked <- stack("L8LayerStack.tif")
layerStacked
# plot a single band
plot(layerStacked[[5]], main = "NIR Band")
# Subset Starts Here
# 1. By custom extent
rectExtnt = extent(214885, 352615, -206315, -120085)  #(xmin, xmax, ymin, ymax)
rectExtnt
plot(rectExtnt, add = TRUE)
# Crop
layerStacked <-crop(layerStacked, rectExtnt)
getwd()
# Import the packages for raster img analysis
library(raster)     #raster
library(rgdal)      #vector
setwd("D:/STUDY/4.GIS/G I S 4.1/2.Geostats/0x520x/")
getwd()
L8_b1 <- "LC08_B01.TIF"
L8_b1 <- "L8_B01.TIF"
# Have a look at data type
class(L8_b1)
L8_b1 <- raster(L8_b1)
L8_b1 <- "INPUT/L8NgaraTiffs/L8_B01.TIF"
# Have a look at data type
class(L8_b1)
L8_b1 <- raster(L8_b1)
L8_b1
L8_b4 <- raster("LC08_B04.TIF")
plot(L8_b1, main = "Landsat 8, Band 1")
# For batch processing, preset your .tif directory
#Bulk read all the .tif raster images in that dir
allBands <- list.files(pattern = ".TIF")
length(allBands)
# For batch processing, preset your .tif directory
#Bulk read all the .tif raster images in that dir
allBands <- list.files(pattern = ".TIF")
length(allBands)
# For batch processing, preset your .tif directory
#Bulk read all the .tif raster images in that dir
allBands <- list.files("INPUT/L8NgaraTiffs", pattern = ".TIF")
length(allBands)
allBands
# select layer8 from list
allBands[[8]]
allBands[[7]]
# Preprocessing : Layerstack(All bands must have same spatial resolutions), bandSelection, plot
lyrStack <- stack(allBands[1], allBands[2], allBands[3], allBands[4], allBands[5], allBands[6], allBands[7])
# Preprocessing : Layerstack(All bands must have same spatial resolutions), bandSelection, plot
lyrStack <- stack(allBands[1], allBands[2], allBands[3], allBands[4], allBands[5], allBands[6], allBands[7])
# Preprocessing : Layerstack(All bands must have same spatial resolutions), bandSelection, plot
lyrStack <- stack("INPUT/L8NgaraTiffs", allBands[1], allBands[2], allBands[3], allBands[4], allBands[5], allBands[6], allBands[7])
allBands
# Preprocessing : Layerstack(All bands must have same spatial resolutions), bandSelection, plot
lyrStack <- stack("INPUT/L8NgaraTiffs", allBands[1], allBands[2], allBands[3], allBands[4], allBands[5], allBands[6], allBands[7])
# Preprocessing : Layerstack(All bands must have same spatial resolutions), bandSelection, plot
lyrStack <- stack("INPUT/L8NgaraTiffs", allBands[1], allBands[2], allBands[3], allBands[4], allBands[5], allBands[6], allBands[7])
setwd("D:/STUDY/4.GIS/G I S 4.1/2.Geostats/0x520x/INPUT/L8NgaraTiffs")
getwd()
L8_b1 <- "INPUT/L8NgaraTiffs/L8_B01.TIF"
L8_b1 <- "INPUT/L8NgaraTiffs/L8_B01.TIF"
# Have a look at data type
class(L8_b1)
# Transform into raster layer
??raster
L8_b1 <- raster(L8_b1)
L8_b1
# Install the required packages
rm(list = ls(all=TRUE)) #clear memory
# Import the packages for raster img analysis
library(raster)     #raster
library(rgdal)      #vector
setwd("D:/STUDY/4.GIS/G I S 4.1/2.Geostats/0x520x/INPUT/L8NgaraTiffs")
getwd()
L8_b1 <- "L8_B01.TIF"
# Have a look at data type
class(L8_b1)
# Have a look at data type
class(raster(L8_b1))
list.files()
content <- list.files()
length(content)
L8_b1 <- "L8_B01.TIF"
# Have a look at data type
class(L8_b1)
raster(L8_b1)
plot(L8_b1, main = "Landsat 8, Band 1")
L8_b1 <- "L8_B01.TIF"
# Have a look at data type
class(L8_b1)
raster(L8_b1)
plot(L8_b1, main = "Landsat 8, Band 1")
L8_b1 <- ("L8_B01.TIF")
# Have a look at data type
class(L8_b1)
raster(L8_b1)
plot(L8_b1, main = "Landsat 8, Band 1")
plot(L8_b1)
plot(L8_b1, scale =65535)
plot(L8_b1, scale =65535, stretch = 'lin')
L8_b1 <- raster(L8_b1)
plot(L8_b1, scale =65535, stretch = 'lin')
# For batch processing, preset your .tif directory
#Bulk read all the .tif raster images in that dir
allBands <- list.files( pattern = ".TIF")
length(allBands)
allBands
# select layer8 from list
metaBand8 <- raster(allBands[[10]])
# select layer8 from list
metaBand8 <- raster(allBands[[7]])
metaBand8
# select layer8 from list
metaBand7 <- raster(allBands[[7]])
metaBand7
# Preprocessing : Layerstack(All bands must have same spatial resolutions), bandSelection, plot
lyrStack <- stack(allBands[1], allBands[2], allBands[3], allBands[4], allBands[5], allBands[6], allBands[7])
# Preprocessing : Layerstack(All bands must have same spatial resolutions), bandSelection, plot
lyrStack <- stack(allBands[1], allBands[2], allBands[3], allBands[4], allBands[5], allBands[6], allBands[7])
# View the metadata of the layerstacked images
metaLyrStack <- lyrStack
metaLyrStack
# Select RED(B5) from stack
lyrStack[[4]]
plot(lyrStack[[7]], main = "Landsat 8 Band 5")
# Plot RGB Natural color
plotRGB(lyrStack, 4,3,2, scale=65535, main = "L8 Natural Color: BGR")
# Plot RGB Natural color
plotRGB(lyrStack, 4,3,2, scale=65535, main = "L8 Natural Color: BGR", stretch = 'lin')
# Save the file to disk
writeRaster(lyrStack, "L8LayerStack.tif", format="GTiff", datatype='INT2U', overwrite=TRUE)
# Save the file to disk
writeRaster(lyrStack, "L8NgLayerStack.tif", format="GTiff", datatype='INT2U', overwrite=TRUE)
getwd()
content <- list.files()
length(content)
getwd()
setwd("D:/STUDY/4.GIS/G I S 4.1/2.Geostats/0x520x")
getwd()
content <- list.files()
length(content)
setwd("D:/STUDY/4.GIS/G I S 4.1/2.Geostats/0x520x/INPUT/L8NgaraTiffs")
getwd()
content <- list.files()
length(content)
layerStacked <- stack("L8NgLayerStack.tif")
layerStacked
# plot a single band
plot(layerStacked[[5]], main = "NIR Band")
# 2. By shapefile
list.files()
# load shp
shp <- readOGR("shapefiles/Ngara.shp")
shp
plotRGB(layerStacked, 4,3,2, scale=65535, stretch = 'lin', main = "RGB Croped")
plot(shp, add = TRUE)
croppedLyrStck <- crop(layerStacked, shp)
# load shp
shp <- readOGR("shapefiles - Reprj/Ngara.shp")
shp
plotRGB(layerStacked, 4,3,2, scale=65535, stretch = 'lin', main = "RGB Croped")
plot(shp, add = TRUE)
croppedLyrStck <- crop(layerStacked, shp)
# load shp
shp <- readOGR("shapefiles - Reprj/Ngara.shp")
shp
plotRGB(layerStacked, 4,3,2, scale=65535, stretch = 'lin', main = "RGB Croped")
plot(shp, add = TRUE)
croppedLyrStck <- crop(layerStacked, shp)
# load shp
shp <- readOGR("shapefiles/Ngara.shp")
shp
plotRGB(layerStacked, 4,3,2, scale=65535, stretch = 'lin', main = "RGB Croped")
plot(shp, add = TRUE)
croppedLyrStck <- crop(layerStacked, shp)
croppedLyrStck
# load shp
shp <- readOGR("shapefiles - Reprj/Ngara.shp")
shp
plotRGB(layerStacked, 4,3,2, scale=65535, stretch = 'lin', main = "RGB Croped")
plot(shp, add = TRUE)
croppedLyrStck <- crop(layerStacked, shp)
# 4. Logit transform
logit <- log(meuse$zinc/1--(meuse$zinc))
# 4. Logit transform
logit <- log(meuse$zinc/(1--(meuse$zinc))
# 4. Logit transform
logit <- log(meuse$zinc/(1--meuse$zinc))
# Clear memory
rm(list=ls(all=TRUE))
#Load existing/install missing libraries
if (!require("pacman", "rcompanion")) install.packages("pacman", "rcompanion")
install.packages("pacman", "rcompanion")
library(sp)
library(rcompanion)
data <- data(meuse)
df <- meuse
knitr::kable(head(df, n=3), align = 'l')
# Normal QQ plots
qqnorm(meuse$copper, main='Copper in Meuse River', xlab = 'Copper', ylab = 'Frequency')
qqline(meuse$copper)
# Both Normal and Histogram at once using the rcompanion package
install.packages("rcompanion")
install.packages("rcompanion")
help(plotNormalHistogram)
plotNormalHistogram(
meuse$zinc,
main = "Original Data",
prob = FALSE,
col = "gray",
linecol = "blue",
)
help(plotNormalHistogram)
plotNormalHistogram(
meuse$zinc,
main = "Original Data",
prob = FALSE,
col = "gray",
linecol = "blue",
)
# Data transformation
#Divide the screen in 2 columns and 2 lines
par(mfrow=c(2,2))
# Plot original Data
plotNormalHistogram(meuse$zinc, main = "Original Data")
# Both Normal and Histogram at once using the rcompanion package
install.packages("rcompanion")
plotNormalHistogram(
meuse$zinc,
main = "Original Data",
prob = FALSE,
col = "gray",
linecol = "blue",
)
max(meuse$zinc)
meuse$zinc
meuse$zinc
max(meuse$zinc)
library(rcompanion)
# 3. Angular
angular <- asin(sqrt(meuse$zinc / max(meuse$zinc)))
plotNormalHistogram(angular, main = "Angular Trnsfrm")
# 4. Logit transform
logit <- log(meuse$zinc/(1--meuse$zinc))
plotNormalHistogram(logit, main = "Angular Trnsfrm")
# 1 Log transform(NB : log(0) is infinity, so avoid that by adding 1 to 0 numbers)
logZinc <- log(meuse$zinc + 1)
plotNormalHistogram(logZinc, main = "Log Transform")
# Data transformation
#Divide the screen in 2 columns and 2 lines
par(mfrow=c(2,2))
# Plot original Data
plotNormalHistogram(meuse$zinc, main = "Original Data")
# 1 Log transform(NB : log(0) is infinity, so avoid that by adding 1 to 0 numbers)
logZinc <- log(meuse$zinc + 1)
plotNormalHistogram(logZinc, main = "Log Transform")
# 2. Sqrt
sqroot <- sqrt(meuse$zinc)
plotNormalHistogram(sqroot, main = "Sqrt Transform")
# 3. Angular
angular <- asin(sqrt(meuse$zinc / max(meuse$zinc)))
plotNormalHistogram(angular, main = "Angular Trnsfrm")
# 4. Logit transform
logit <- log(meuse$zinc/(1--meuse$zinc))
plotNormalHistogram(logit, main = "Angular Trnsfrm")
plotNormalHistogram(logit, main = "Logit Trnsfrm")
# 4. Logit transform
logit <- log(meuse$zinc/(1-meuse$zinc))
plotNormalHistogram(logit, main = "Logit Trnsfrm")
# 4. Logit transform
logit <- log(meuse$zinc/(1--meuse$zinc))
plotNormalHistogram(logit, main = "Logit Trnsfrm")
# 4. Logit transform
logit <- log10(meuse$zinc/(1--meuse$zinc))
plotNormalHistogram(logit, main = "Logit Trnsfrm")
log(0)
log(0+1)
# 4. Logit transform
logit <- log10(meuse$zinc/(1-meuse$zinc))
plotNormalHistogram(logit, main = "Logit Trnsfrm")
# 4. Logit transform
logit <- log10(meuse$zinc/(1--meuse$zinc))
plotNormalHistogram(logit, main = "Logit Trnsfrm")
# 4. Logit transform
logit <- log(meuse$zinc/(1--meuse$zinc))
plotNormalHistogram(logit, main = "Logit Trnsfrm")
# Data transformation
#Divide the screen in 2 columns and 2 lines
par(mfrow=c(2,2))
# 4. Logit transform
logit <- log10(meuse$zinc/(1--meuse$zinc))
plotNormalHistogram(logit, main = "Logit(10) Trnsfrm")
logit <- log(meuse$zinc/(1--meuse$zinc))
plotNormalHistogram(logit, main = "Logit Trnsfrm")
# 3. Angular2
angular <- asin(sqrt(meuse$zinc / max(meuse$zinc))*2/pi)
plotNormalHistogram(angular, main = "Angular Trnsfrm")
# 3. Angular2
angular <- asin(sqrt(meuse$zinc / 100)*2/pi)
plotNormalHistogram(angular, main = "Angular Trnsfrm")
meuse$zinc
# Measure of Central Tendency
# 1 Mean of
logZinc <- log(meuse$zinc + 1)
mlogZinc <- mean(logZinc)
plotNormalHistogram(mlogZinc, main = "Log Transform")
mlogZinc
plotNormalHistogram(logZinc, main = "Log Transform")
msqrt <- mean(sqroot)
msqrt
plotNormalHistogram(angular,col = "yellow", main = "Angular Trnsfrm")
median((mlmogZinc))
median(mlogZinc)
median(logZinc)
summary(mean(angular), median(angular))
median(angular)
# 3. Angular
angular <- asin(sqrt(meuse$zinc / max(meuse$zinc)))
plotNormalHistogram(angular, main = "Angular Trnsfrm")
median(sqroot)
median(angular)
mean(angular)
mean(logit)
median(logit)
Summary(logit)
summary(logit)
summary(logit, sqroot)
summary(sqroot)
mean(mlogZinc)-median(mlogZinc)
mean(mlogZinc)
median(mlogZinc)
mean(logZinc)-median(logZinc)
# Import the geostats libraries
# library(sp)
library(lattice) #for plotting graphics
#call the meuse R data
data(meuse)
levels(meuse$ffreq) <- paste("ffreq", levels(meuse$ffreq), sep="")
levels(meuse$soil) <- paste("soil", levels(meuse$soil), sep="")
str(meuse)
palette(trellis.par.get("superpose.symbol")$col)
plot(zinc~dist, meuse, pch=as.integer(ffreq), col=soil)
# Add lattice legend at the topright
legend("topright", col=c(rep(1, nlevels(meuse$ffreq)), 1:nlevels(meuse$soil)),
pch=c(1:nlevels(meuse$ffreq), rep(1, nlevels(meuse$soil))), bty="n",
legend=c(levels(meuse$ffreq), levels(meuse$soil)))
panel=function(x, y, ...)
{
panel.xyplot(x, y, ...)
panel.loess(x, y, ...)
}
xyplot(log(zinc)~dist | ffreq, meuse, groups=soil, panel=function(x, y, ...)
{
panel.xyplot(x, y, ...)
panel.loess(x, y, ...)
},
auto.key=TRUE)
# Clear memory
rm(list=ls(all=TRUE))
levels(meuse$ffreq) <- paste("ffreq", levels(meuse$ffreq), sep="")
levels(meuse$soil) <- paste("soil", levels(meuse$soil), sep="")
str(meuse)
palette(trellis.par.get("superpose.symbol")$col)
plot(zinc~dist, meuse, pch=as.integer(ffreq), col=soil)
# Add lattice legend at the topright
legend("topright", col=c(rep(1, nlevels(meuse$ffreq)), 1:nlevels(meuse$soil)),
pch=c(1:nlevels(meuse$ffreq), rep(1, nlevels(meuse$soil))), bty="n",
legend=c(levels(meuse$ffreq), levels(meuse$soil)))
panel=function(x, y, ...)
{
panel.xyplot(x, y, ...)
panel.loess(x, y, ...)
}
xyplot(log(zinc)~dist | ffreq, meuse, groups=soil, panel=function(x, y, ...)
{
panel.xyplot(x, y, ...)
panel.loess(x, y, ...)
},
auto.key=TRUE)
plot(zinc~dist, meuse, pch=as.integer(ffreq), col=soil)
# Import the geostats libraries
# library(sp)
library(lattice) #for plotting graphics
#call the meuse R data
data(meuse)
libary(sp)
#call the meuse R data
data(meuse)
library(sp)
#call the meuse R data
data(meuse)
levels(meuse$ffreq) <- paste("ffreq", levels(meuse$ffreq), sep="")
levels(meuse$soil) <- paste("soil", levels(meuse$soil), sep="")
str(meuse)
palette(trellis.par.get("superpose.symbol")$col)
plot(zinc~dist, meuse, pch=as.integer(ffreq), col=soil)
# Add lattice legend at the topright
legend("topright", col=c(rep(1, nlevels(meuse$ffreq)), 1:nlevels(meuse$soil)),
pch=c(1:nlevels(meuse$ffreq), rep(1, nlevels(meuse$soil))), bty="n",
legend=c(levels(meuse$ffreq), levels(meuse$soil)))
# Import the 2 packages
library(sp)
library(lattice)
# call the meuse data
data(meuse)
coordinates(meuse) <- c("x", "y")
# Predict topsoil zinc concentration using spplot & bubble plots
spplot(meuse, "zinc", do.log = T, colorkey = TRUE)
bubble(meuse, "zinc", do.log = T, key.space = "right")
libary(ggplot2)
library(scales)
install.packages(RColorBrewer)
install.packages("RColorBrewer")
#create a categorical variable
meuse$zinc_cat <-cut(meuse$zinc)
#create a categorical variable
meuse$zinc_cat <-cut(meuse$zinc, breaks = 0,200,400,800,1200,2000)
#create a categorical variable
meuse$zinc_cat <-cut(meuse$zinc, breaks = c(0,200,400,800,1200,2000))
zinc.plot <- ggplot(aes(x=x, y=y), data = meuse)
library(ggplot2)
zinc.plot <- ggplot(aes(x=x, y=y), data = meuse)
load(system.file("data", "meuse.rda", package = "sp"))
#create a categorical variable
meuse$zinc_cat <-cut(meuse$zinc, breaks = c(0,200,400,800,1200,2000))
zinc.plot <- ggplot(aes(x=x, y=y), data = meuse)
zinc.plot<-zinc.plot+geom_point(aes(color = zinc_cat))
zinc.plot <- zinc.plot+coord_equal()
zinc.plot <- zinc.plot+scale_color_brewer(pallete = "YlGnBu")
install.packages("RColorBrewer")
zinc.plot <- zinc.plot+scale_color_brewer(pallete = "YlGnBu")
zinc.plot
